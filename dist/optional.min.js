(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define('Optional', [], function () {
      return (root.returnExportsGlobal = factory());
    });
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like enviroments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    root['Optional'] = factory();
  }
}(this, function () {

var Optional=function(){function a(){}return a.of=function(b){if(null==b)throw new Error("Cannot create Optional.of null/undefined! Try Optional.ofNullable instead.");return a.ofNullable(b)},a.ofNullable=function(b){var c=new a;return c.value=b,c},a.empty=function(){return new a},a.prototype.get=function(){if(this.isPresent())return this.value;throw new Error("Cannot get value of empty optional!")},a.prototype.orElse=function(a){return this.isPresent()?this.value:a},a.prototype.orElseGet=function(a){return this.isPresent()?this.value:a()},a.prototype.map=function(b){if(this.isPresent()){var c=b(this.value);return a.ofNullable(c)}return a.empty()},a.prototype.flatMap=function(b){if(this.isPresent()){var c=b(this.value);return c}return a.empty()},a.prototype.isPresent=function(){return null!=this.value},a.prototype.ifPresent=function(a){this.isPresent()&&a(this.value)},a.prototype.filter=function(b){return this.isPresent()&&1==b(this.value)?a.of(this.value):a.empty()},a}();

return Optional;


}));
